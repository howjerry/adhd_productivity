name: Auto Fix

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-fix:
    name: Auto Fix Issues
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ github.head_ref }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          frontend/package-lock.json
          backend/package-lock.json

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    # Frontend 自動修復
    - name: Fix Frontend Issues
      working-directory: ./frontend
      run: |
        echo "=== Installing dependencies ==="
        npm ci

        echo "=== Running ESLint auto-fix ==="
        npm run lint:fix || true

        echo "=== Running Prettier format ==="
        npm run format || true

        echo "=== Organizing imports ==="
        npx organize-imports-cli 'src/**/*.{ts,tsx}' --write || true

        echo "=== Running npm audit fix (only production) ==="
        npm audit fix --only=prod || true

    # Backend Node.js 自動修復
    - name: Fix Backend Node.js Issues
      working-directory: ./backend
      run: |
        if [ -f package.json ]; then
          echo "=== Installing dependencies ==="
          npm ci

          echo "=== Running ESLint auto-fix ==="
          npm run lint:fix || true

          echo "=== Running Prettier format ==="
          npm run format || true

          echo "=== Running npm audit fix (only production) ==="
          npm audit fix --only=prod || true
        fi

    # Backend .NET 自動修復
    - name: Fix Backend .NET Issues
      working-directory: ./backend
      run: |
        echo "=== Running dotnet format ==="
        dotnet format --verbosity diagnostic || true

        echo "=== Running dotnet restore ==="
        dotnet restore || true

    # 根目錄自動修復
    - name: Fix Root Issues
      run: |
        if [ -f package.json ]; then
          echo "=== Running npm audit fix (only production) ==="
          npm audit fix --only=prod || true
        fi

    # 檢查是否有變更
    - name: Check for changes
      id: changes
      run: |
        if [[ -n $(git status -s) ]]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          git diff --name-only
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "No changes to commit"
        fi

    # 提交變更
    - name: Commit changes
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # 分階段提交不同類型的修復
        
        # 1. 程式碼格式化
        git add "*.ts" "*.tsx" "*.js" "*.jsx" "*.cs" "*.json" || true
        if [[ -n $(git diff --cached --name-only) ]]; then
          git commit -m "🎨 Auto-fix: Format code with ESLint, Prettier and dotnet format"
        fi
        
        # 2. package-lock.json 更新
        git add "**/package-lock.json" || true
        if [[ -n $(git diff --cached --name-only) ]]; then
          git commit -m "🔒 Auto-fix: Update package-lock.json (security fixes)"
        fi
        
        # 3. 其他檔案
        git add -A || true
        if [[ -n $(git diff --cached --name-only) ]]; then
          git commit -m "🔧 Auto-fix: Apply other automatic fixes"
        fi
        
        git push

    # 添加評論
    - name: Add PR comment
      if: steps.changes.outputs.has_changes == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `### 🤖 自動修復已套用

          以下問題已自動修復：
          - ✅ ESLint 規則違反
          - ✅ Prettier 格式化
          - ✅ Import 組織和排序
          - ✅ npm 安全性漏洞（僅生產依賴）
          - ✅ .NET 程式碼格式化

          請執行 \`git pull\` 以取得最新變更。`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

    # 如果沒有變更，也添加評論
    - name: Add no changes comment
      if: steps.changes.outputs.has_changes == 'false'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `### ✨ 程式碼品質良好

          自動修復掃描完成，沒有發現需要修復的問題！`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  # 執行修復後的驗證
  verify-fixes:
    name: Verify Fixes
    needs: auto-fix
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout updated code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          frontend/package-lock.json
          backend/package-lock.json

    - name: Verify Frontend
      working-directory: ./frontend
      run: |
        echo "=== Installing dependencies ==="
        npm ci
        
        echo "=== Running lint check ==="
        npm run lint || echo "Some lint issues remain"
        
        echo "=== Running type check ==="
        npm run typecheck || echo "Some type issues remain"

    - name: Verify Backend
      working-directory: ./backend
      run: |
        if [ -f package.json ]; then
          echo "=== Installing dependencies ==="
          npm ci
          
          echo "=== Running lint check ==="
          npm run lint || echo "Some lint issues remain"
        fi