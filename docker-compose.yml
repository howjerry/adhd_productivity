# ADHD 生產力系統
# 一鍵啟動完整系統，包含所有必要服務
# 確保在項目根目錄創建 .env 文件並配置所需的環境變量

services:
  # PostgreSQL 資料庫
  adhd-postgres:
    image: postgres:16-alpine
    container_name: adhd-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - adhd-internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis 快取服務
  adhd-redis:
    image: redis:7-alpine
    container_name: adhd-redis
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - adhd-internal
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # ASP.NET Core 後端 API
  adhd-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: adhd-backend
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development}
      - ASPNETCORE_URLS=http://+:5000
      - POSTGRES_HOST=adhd-postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=adhd-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT__SecretKey=${JWT_SECRET_KEY}
      - JWT__Issuer=${JWT_ISSUER:-ADHDProductivitySystem}
      - JWT__Audience=${JWT_AUDIENCE:-ADHDUsers}
      - JWT__TokenExpirationMinutes=${JWT_EXPIRY_MINUTES:-60}
      - LOG_LEVEL=${LOG_LEVEL:-Information}
    ports:
      - "5000:5000"
    networks:
      - adhd-internal
    depends_on:
      adhd-postgres:
        condition: service_healthy
      adhd-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - backend_logs:/app/logs

  # React 前端應用
  adhd-frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=http://localhost/api
        - VITE_SIGNALR_HUB_URL=http://localhost/hubs
    container_name: adhd-frontend
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VITE_API_BASE_URL=http://localhost/api
      - VITE_SIGNALR_HUB_URL=http://localhost/hubs
    networks:
      - adhd-internal
    depends_on:
      adhd-backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health.html || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - frontend_logs:/var/log/nginx
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Nginx 反向代理 - 唯一對外暴露的服務
  adhd-nginx:
    image: nginx:alpine
    container_name: adhd-nginx
    ports:
      - "8080:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/proxy_params:/etc/nginx/proxy_params:ro
      - ./security/certs:/etc/nginx/certs:ro
      - nginx_logs:/var/log/nginx
    networks:
      - adhd-internal
    depends_on:
      adhd-backend:
        condition: service_healthy
      adhd-frontend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d
      - DOMAIN=${DOMAIN:-localhost}
      - SSL_MODE=${SSL_MODE:-development}

  # pgAdmin 資料庫管理介面 (可選，使用 profiles 控制)
  adhd-pgadmin:
    image: dpage/pgadmin4:latest
    container_name: adhd-pgadmin
    profiles:
      - admin
      - development
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - adhd-internal
    depends_on:
      adhd-postgres:
        condition: service_healthy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Certbot SSL 證書管理 (生產環境)
  adhd-certbot:
    image: certbot/certbot
    container_name: adhd-certbot
    profiles:
      - production
      - ssl
    volumes:
      - certbot_data:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
      - ./security/scripts:/scripts:ro
    environment:
      - DOMAIN=${DOMAIN}
      - EMAIL=${CERTBOT_EMAIL}
    command: >
      sh -c "
        if [ ! -f /etc/letsencrypt/live/\$${DOMAIN:-localhost}/fullchain.pem ]; then
          echo 'Obtaining initial certificate...';
          certbot certonly --webroot --webroot-path=/var/www/certbot --email \$${CERTBOT_EMAIL} --agree-tos --no-eff-email -d \$${DOMAIN} -d www.\$${DOMAIN};
        else
          echo 'Certificate already exists, checking for renewal...';
          certbot renew;
        fi;
        echo 'Starting renewal daemon...';
        trap exit TERM;
        while :; do
          certbot renew;
          sleep 12h & wait \$$!;
        done;
      "
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # =============================================
  # 監控和日誌系統
  # =============================================

  # Prometheus 監控服務
  adhd-prometheus:
    image: prom/prometheus:latest
    container_name: adhd-prometheus
    profiles:
      - monitoring
      - full
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=1GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - adhd-internal
    depends_on:
      - adhd-backend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana 視覺化服務
  adhd-grafana:
    image: grafana/grafana:latest
    container_name: adhd-grafana
    profiles:
      - monitoring
      - full
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-your-secret-key}
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_SECURITY_COOKIE_SECURE=false
      - GF_SECURITY_COOKIE_SAMESITE=lax
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_LOG_MODE=console
      - GF_LOG_LEVEL=info
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - adhd-internal
    depends_on:
      - adhd-prometheus
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    user: "472"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # AlertManager 警報管理
  adhd-alertmanager:
    image: prom/alertmanager:latest
    container_name: adhd-alertmanager
    profiles:
      - monitoring
      - full
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - adhd-internal
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL Exporter
  adhd-postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: adhd-postgres-exporter
    profiles:
      - monitoring
      - full
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@adhd-postgres:5432/${POSTGRES_DB}?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    volumes:
      - ./monitoring/postgres-queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    networks:
      - adhd-internal
    depends_on:
      adhd-postgres:
        condition: service_healthy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Exporter
  adhd-redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: adhd-redis-exporter
    profiles:
      - monitoring
      - full
    environment:
      REDIS_ADDR: "redis://adhd-redis:6379"
      REDIS_EXPORTER_LOG_FORMAT: "json"
    networks:
      - adhd-internal
    depends_on:
      adhd-redis:
        condition: service_healthy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter (系統資源監控)
  adhd-node-exporter:
    image: prom/node-exporter:latest
    container_name: adhd-node-exporter
    profiles:
      - monitoring
      - full
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - adhd-internal
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # cAdvisor (容器監控)
  adhd-cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: adhd-cadvisor
    profiles:
      - monitoring
      - full
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    networks:
      - adhd-internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
    name: adhd_postgres_data
  redis_data:
    driver: local
    name: adhd_redis_data
  pgadmin_data:
    driver: local
    name: adhd_pgadmin_data
  nginx_logs:
    driver: local
    name: adhd_nginx_logs
  frontend_logs:
    driver: local
    name: adhd_frontend_logs
  backend_logs:
    driver: local
    name: adhd_backend_logs
  prometheus_data:
    driver: local
    name: adhd_prometheus_data
  grafana_data:
    driver: local
    name: adhd_grafana_data
  alertmanager_data:
    driver: local
    name: adhd_alertmanager_data
  certbot_data:
    driver: local
    name: adhd_certbot_data
  certbot_webroot:
    driver: local
    name: adhd_certbot_webroot

networks:
  adhd-internal:
    driver: bridge
    name: adhd-productivity-network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1