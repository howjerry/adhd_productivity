version: '3.8'

# ADHD 生產力系統
# 一鍵啟動完整系統，包含所有必要服務
# 確保在項目根目錄創建 .env 文件並配置所需的環境變量

services:
  # PostgreSQL 資料庫
  adhd-postgres:
    image: postgres:16-alpine
    container_name: adhd-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/schemas:/docker-entrypoint-initdb.d/schemas:ro
    networks:
      - adhd-internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis 快取服務
  adhd-redis:
    image: redis:7-alpine
    container_name: adhd-redis
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      ${REDIS_PASSWORD:+--requirepass} ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - adhd-internal
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # ASP.NET Core 後端 API
  adhd-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: adhd-backend
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=${ASPNETCORE_URLS:-http://+:5000}
      - POSTGRES_HOST=adhd-postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=adhd-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ISSUER=${JWT_ISSUER:-ADHDProductivitySystem}
      - JWT_AUDIENCE=${JWT_AUDIENCE:-ADHDUsers}
      - JWT_EXPIRY_MINUTES=${JWT_EXPIRY_MINUTES:-60}
      - LOG_LEVEL=${LOG_LEVEL:-Information}
    networks:
      - adhd-internal
    depends_on:
      adhd-postgres:
        condition: service_healthy
      adhd-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # React 前端應用
  adhd-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: adhd-frontend
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost/api}
      - VITE_SIGNALR_HUB_URL=${VITE_SIGNALR_HUB_URL:-http://localhost/hubs}
    networks:
      - adhd-internal
    depends_on:
      adhd-backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Nginx 反向代理 - 唯一對外暴露的服務
  adhd-nginx:
    image: nginx:alpine
    container_name: adhd-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    networks:
      - adhd-internal
    depends_on:
      adhd-backend:
        condition: service_healthy
      adhd-frontend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # pgAdmin 資料庫管理介面 (可選，使用 profiles 控制)
  adhd-pgadmin:
    image: dpage/pgadmin4:latest
    container_name: adhd-pgadmin
    profiles:
      - admin
      - development
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - adhd-internal
    depends_on:
      adhd-postgres:
        condition: service_healthy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

volumes:
  postgres_data:
    driver: local
    name: adhd_postgres_data
  redis_data:
    driver: local
    name: adhd_redis_data
  pgadmin_data:
    driver: local
    name: adhd_pgadmin_data
  nginx_logs:
    driver: local
    name: adhd_nginx_logs

networks:
  adhd-internal:
    driver: bridge
    name: adhd-productivity-network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1