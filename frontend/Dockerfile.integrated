# ADHD 生產力系統 - 前端 Docker 整合環境
# React + TypeScript + Vite 開發與生產環境

# 建置階段
FROM node:20-alpine AS build

# 安裝系統相依性
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl

WORKDIR /app

# 建立基本的 package.json 如果不存在
RUN if [ ! -f "package.json" ]; then \
    echo '{ \
        "name": "adhd-productivity-frontend", \
        "version": "1.0.0", \
        "type": "module", \
        "scripts": { \
            "dev": "vite --host 0.0.0.0 --port 3000", \
            "build": "tsc && vite build", \
            "preview": "vite preview --host 0.0.0.0 --port 3000", \
            "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0", \
            "type-check": "tsc --noEmit" \
        }, \
        "dependencies": { \
            "react": "^18.2.0", \
            "react-dom": "^18.2.0", \
            "react-router-dom": "^6.20.1", \
            "zustand": "^4.4.6", \
            "@microsoft/signalr": "^8.0.0", \
            "axios": "^1.6.2", \
            "date-fns": "^2.30.0", \
            "react-hook-form": "^7.48.2", \
            "react-query": "^3.39.3", \
            "framer-motion": "^10.16.5", \
            "lucide-react": "^0.294.0", \
            "clsx": "^2.0.0", \
            "tailwind-merge": "^2.0.0" \
        }, \
        "devDependencies": { \
            "@types/react": "^18.2.37", \
            "@types/react-dom": "^18.2.15", \
            "@typescript-eslint/eslint-plugin": "^6.10.0", \
            "@typescript-eslint/parser": "^6.10.0", \
            "@vitejs/plugin-react": "^4.1.1", \
            "eslint": "^8.53.0", \
            "eslint-plugin-react-hooks": "^4.6.0", \
            "eslint-plugin-react-refresh": "^0.4.4", \
            "typescript": "^5.2.2", \
            "vite": "^5.0.0", \
            "tailwindcss": "^3.3.6", \
            "autoprefixer": "^10.4.16", \
            "postcss": "^8.4.32", \
            "sass": "^1.69.5" \
        } \
    }' > package.json; \
fi

# 建立基本的 vite.config.ts
RUN if [ ! -f "vite.config.ts" ]; then \
    echo 'import { defineConfig } from "vite"\nimport react from "@vitejs/plugin-react"\n\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    host: "0.0.0.0",\n    port: 3000,\n    watch: {\n      usePolling: true\n    }\n  },\n  build: {\n    outDir: "dist",\n    sourcemap: true\n  }\n})' > vite.config.ts; \
fi

# 建立基本的 tsconfig.json
RUN if [ ! -f "tsconfig.json" ]; then \
    echo '{\n  "compilerOptions": {\n    "target": "ES2020",\n    "useDefineForClassFields": true,\n    "lib": ["ES2020", "DOM", "DOM.Iterable"],\n    "module": "ESNext",\n    "skipLibCheck": true,\n    "moduleResolution": "bundler",\n    "allowImportingTsExtensions": true,\n    "resolveJsonModule": true,\n    "isolatedModules": true,\n    "noEmit": true,\n    "jsx": "react-jsx",\n    "strict": true,\n    "noUnusedLocals": true,\n    "noUnusedParameters": true,\n    "noFallthroughCasesInSwitch": true\n  },\n  "include": ["src"],\n  "references": [{ "path": "./tsconfig.node.json" }]\n}' > tsconfig.json; \
fi

# 建立基本的 index.html
RUN if [ ! -f "index.html" ]; then \
    mkdir -p public && \
    echo '<!DOCTYPE html>\n<html lang="zh-TW">\n<head>\n  <meta charset="UTF-8" />\n  <link rel="icon" type="image/svg+xml" href="/vite.svg" />\n  <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n  <title>ADHD 生產力管理系統</title>\n</head>\n<body>\n  <div id="root"></div>\n  <script type="module" src="/src/main.tsx"></script>\n</body>\n</html>' > index.html; \
fi

# 建立基本的 React 應用結構
RUN if [ ! -d "src" ]; then \
    mkdir -p src && \
    echo 'import React from "react"\nimport ReactDOM from "react-dom/client"\nimport App from "./App.tsx"\nimport "./index.css"\n\nReactDOM.createRoot(document.getElementById("root")!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)' > src/main.tsx && \
    echo 'import { useState } from "react"\nimport "./App.css"\n\nfunction App() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <div className="App">\n      <h1>🧠 ADHD 生產力管理系統</h1>\n      <div className="card">\n        <button onClick={() => setCount((count) => count + 1)}>\n          計數器: {count}\n        </button>\n        <p>系統正在啟動中...</p>\n      </div>\n    </div>\n  )\n}\n\nexport default App' > src/App.tsx && \
    echo 'body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.App {\n  text-align: center;\n  padding: 2rem;\n}\n\n.card {\n  padding: 2rem;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  margin: 2rem auto;\n  max-width: 600px;\n}' > src/App.css && \
    echo ':root {\n  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;\n  line-height: 1.5;\n  font-weight: 400;\n  color-scheme: light dark;\n  color: rgba(255, 255, 255, 0.87);\n  background-color: #242424;\n}' > src/index.css; \
fi

# 複製 package.json 和 lock files (如果存在)
COPY package*.json ./
COPY yarn.lock* ./
COPY pnpm-lock.yaml* ./

# 安裝相依性
RUN if [ -f "pnpm-lock.yaml" ]; then \
        corepack enable && pnpm install; \
    elif [ -f "yarn.lock" ]; then \
        yarn install --frozen-lockfile; \
    else \
        npm ci || npm install; \
    fi

# 複製原始碼
COPY . .

# 建置應用程式 (生產模式)
RUN npm run build 2>/dev/null || yarn build 2>/dev/null || true

# 執行階段
FROM node:20-alpine AS runtime

# 安裝 serve 用於提供靜態檔案服務
RUN npm install -g serve

WORKDIR /app

# 複製 node_modules 和原始碼
COPY --from=build /app/node_modules ./node_modules
COPY --from=build /app/package.json ./
COPY --from=build /app .

# 建立必要的目錄
RUN mkdir -p /app/logs /app/.cache /app/dist && \
    chmod 755 /app/logs /app/.cache /app/dist

# 建立健康檢查腳本
RUN echo '#!/bin/sh\ncurl -f http://localhost:3000 || exit 1' > /app/healthcheck.sh && \
    chmod +x /app/healthcheck.sh

# 安裝 curl 用於健康檢查
RUN apk add --no-cache curl

# 環境變數
ENV NODE_ENV=development
ENV CHOKIDAR_USEPOLLING=true
ENV WATCHPACK_POLLING=true

# 暴露端口
EXPOSE 3000

# 設定使用者權限
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 && \
    chown -R nextjs:nodejs /app
USER nextjs

# 健康檢查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /app/healthcheck.sh

# 啟動命令 (開發模式)
CMD ["npm", "run", "dev"]